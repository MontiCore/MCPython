/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/*
 * The following utf-8 symbols are used to parse the Python files without having to add whitespace to the Grammar.
 * In a preprocessing step code blocks are denoted with \u204f = ⦃ and \u2984 = ⦄, and lines are ended with \u204f = ⁏
 */
grammar Python extends  de.monticore.MultilineString, // Must be first to avoid conflicts with String token!
                        de.monticore.expressions.CommonExpressions,
                        de.monticore.expressions.AssignmentExpressions,
                        de.monticore.literals.MCCommonLiterals,
                        de.monticore.symbols.OOSymbols {

  PythonScript = Statement*;

  @Override
  token WS = (' ' | '\t' | '\r' | '\n' ) : -> channel(HIDDEN);

  @Override
  token SL_COMMENT = "#" (~('\n' | '\r' ))* : -> channel(HIDDEN);
  token BLOCK_START = '\u2983';
  token BLOCK_END = '\u2984';
  token STATEMENT_END = ';'? '\u204f' | ';' '\u204f'?;

  token ByteOrderMark = '\uFEFF' : -> skip;

  // Will be filtered out by the WhitespacePreprocessingTokenSource
  // Used break a line without finishing the statement
  token CONTINUE_LINE_TOKEN = '\\' '\r'? '\n';

  // Often (mis)used as a multiline comment but can also be used as a string literal, thus we can not skip it
  token MultiLineStringToken = ((("\'\'\'") .*? ("\'\'\'")) | ((DoubleQuoteMultilineStringDelimiter .*? DoubleQuoteMultilineStringDelimiter)));

  StringModifier = /*{cmpTokenRegEx(1, "(f|r|b|u|F|R|B|U)+")}?*/ type:Name;
  MultiLineStringLiteral implements Literal = StringModifier? MultiLineStringToken;

  token HexNumberToken = '0' 'x' ('0'..'9' | 'a'..'f' | 'A'..'F')+;
  HexNumberLiteral implements NumericLiteral <100> = HexNumberToken;

  // PEP 515: Underscores in Numeric Literals
  // TODO: Move this into its own token?
  @Override
  token Digits
    = Digit ('_'?  Digit)*; // technically the first digit must be nonzero except for 0(_0)*

  interface Statement;

  // The StatementBlock represents a number of statements with the same indentation
  // Here, C-Style brackets are used instead of indentation
  scope StatementBlock = (BLOCK_START StatementBlockBody BLOCK_END) | Statement;
  StatementBlockBody = Statement+;

  /*===========================Statements======================================*/
  LiteralStatement implements ClassStatement = Literal STATEMENT_END;

  PassStatement implements Statement, ClassStatement = "pass" STATEMENT_END;

  ElseStatementPart = "else" ":" StatementBlock;

  PyQualifiedName = (Name || ".")+;
  astrule PyQualifiedName = method public String joined(){
    return String.join(".", getNameList());
  };

  // import statement
  ImportStatement implements Statement =
      ("from" {!next("import")}? (leadingDots:"."*) (module:PyQualifiedName)?)?
      "import"
          (
              ModuleList
              | paren:"(" ModuleList ")"
          )
      STATEMENT_END;

  ModuleList = star:"*" | ((ModuleWithOptionalAlias || ",")+ ","?);

  ModuleWithOptionalAlias = name:PyQualifiedName ("as" alias:Name)?;


  // if-else statement
  IfStatement implements Statement = "if"   condition:Expression     ":" thenStatement:StatementBlock
                                   ("elif" elifCondition:Expression ":" elifStatement:StatementBlock )*
                                   ElseStatementPart?;

  // assert statement
  AssertStatement implements Statement = "assert" condition:Expression ("," errorMessage:Expression)? STATEMENT_END;

  // for statement
  scope ForStatement implements Statement = async:"async"? "for" ForControl ":" StatementBlock
                                            ElseStatementPart? ;

  ForControl = ForDecomposition "in" ForIterable;
  interface ForDecomposition;
  ForVariable implements Variable, ForDecomposition = Name;
  ForDecompositionComma implements ForDecomposition = ForDecomposition "," (ForDecomposition ","?)?;
  ForDecompositionParenthesis implements ForDecomposition = "(" ForDecomposition ")";

  ForIterable = Expression;

  // while statement
  WhileStatement implements Statement = "while" condition:Expression ":" StatementBlock
                                      ElseStatementPart? ;

  BreakStatement implements Statement = "break" STATEMENT_END;
  ContinueStatement implements Statement = "continue" STATEMENT_END;

  // try-except-finally statement
  TryExceptStatement implements Statement = "try" ":" tryStatement:StatementBlock
                                              (
                                                  (
                                                        ExceptStatement+
                                                        ElseStatementPart?
                                                        FinallyStatement?
                                                  )
                                                  | FinallyStatement
                                              )
                                          ;

  ExceptStatement = "except" (PyQualifiedName? | "(" (PyQualifiedName || ",")+ ")") ("as" alias:Name)? ":" StatementBlock;
  FinallyStatement = "finally" ":" finallyStatement:StatementBlock;

  // with open file statement
  scope WithStatement implements Statement = async:"async"? "with" (WithStatementContents || ",")+ ":"
                                            StatementBlock ;

  WithStatementContents = Expression ("as" target:Name)? ; // target has slicing/etc

  // variable declaration statement
  LocalVariableDeclarationStatement implements Statement = VariableDeclaration STATEMENT_END;

  VariableDeclaration implements Variable = Name (
    ((":" TypeAnnotation)? "=" VariableInit)
    |
    (":" TypeAnnotation)
  );

  GlobalVariableDeclaration implements Statement = "global" Name (":" TypeAnnotation)? STATEMENT_END;

  MultiVariableDeclaration implements Statement = (Name || ",")+ "=" Expression STATEMENT_END;
  ParenMultiVariableDeclaration implements Statement = "(" (Name || ",")+ ")" "=" Expression STATEMENT_END;

  interface VariableInit ;

  SimpleInit implements VariableInit = Expression ;

  ArrayLiteralExpression  implements Expression = "[" (VariableInit || ",")* ","? "]" ;
  TupleLiteralExpression  implements Expression = "(" (VariableInit || ",")* ","? ")" ;
  DictLiteralExpression   implements Expression = "{" (DictEntry || ",")* ","? "}" ;
  SetLiteralExpression    implements Expression = "{" (Expression || ",")* ","? "}" ;

  DictEntry = key:VariableInit ":" value:VariableInit | SpreadMappingExpression;

  // 6.3.3 - Slicing
  IndexExpression implements Expression = Expression "[" (IndexExpressionInner || ",")+ tuple:","? "]";

  // slice_item
  interface IndexExpressionInner;

  SimpleIndex implements IndexExpressionInner = Expression;
  // missing expressions are substituted by their default
  ProperSlice implements IndexExpressionInner = lower:Expression? ":" upper:Expression? (":" stride:Expression?)?;
 // AllIndex implements IndexExpressionInner = ":";
 // FromIndex implements IndexExpressionInner = from:Expression ":";
 // UntilIndex implements IndexExpressionInner = ":" until:Expression;
 // RangeIndex implements IndexExpressionInner = from:Expression (":"  step:Expression )? ":" until:Expression;

  // Walrus operator
  PyAssignmentExpression implements Expression = variable:Name operator:":=" right:Expression;

  // List/Set/Dict comprehension
  ListComprehensionExpression implements Expression = "[" Expression "for" ForControl GeneratorFilter? "]";
  SetComprehensionExpression implements Expression = "{" Expression "for" ForControl GeneratorFilter? "}";
  DictComprehensionExpression implements Expression = "{" Name ":" Expression "for" ForControl GeneratorFilter?  "}";
  GeneratorExpression implements Expression = Expression "for" ForControl GeneratorFilter? ;

  GeneratorFilter = "if" condition:Expression;

  // function declaration statement
  interface FunctionDeclaration extends Function = Name ;

  SimpleFunctionDeclaration implements FunctionDeclaration, Statement = PyDecorator* async:"async"? "def" Name "(" FunctionParameters ")" ("->" returnType:TypeAnnotation)? ":"
                                                        StatementBlock ;
  FunctionParameters = (FunctionParameter  || ",")* ","?;

  interface FunctionParameter;

  interface TypeAnnotation;
  StringTypeAnnotation      implements TypeAnnotation = StringLiteralPython;
  TupleTypeAnnotation       implements TypeAnnotation = "(" (TypeAnnotation || ",")+ ","? ")";
  QualifiedTypeAnnotation   implements TypeAnnotation = type:PyQualifiedName ("[" typeParams:(TypeAnnotation || ",")* "]")?;
  AlternativeTypeAnnotation implements TypeAnnotation = <rightassoc> lhs:TypeAnnotation "|" rhs:TypeAnnotation;
  CommaTypeAnnotation       implements TypeAnnotation = <rightassoc> lhs:TypeAnnotation "," rhs:TypeAnnotation ","?;
  ListTypeAnnotation        implements TypeAnnotation = "[" TypeAnnotation "]";
  EllipsisTypeAnnotation    implements TypeAnnotation = "...";
  ComplexTypeAnnotation     implements TypeAnnotation <200> = Expression;

  SimpleFunctionParameter   implements FunctionParameter, Variable = Name (":" TypeAnnotation)?;
  OptionalFunctionParameter implements FunctionParameter, Variable = Name (":" TypeAnnotation)? "=" Expression ;
  VarArgFunctionParameter   implements FunctionParameter, Variable = "*" Name (":" TypeAnnotation)?;
  KWArgFunctionParameter    implements FunctionParameter, Variable = "**" Name (":" TypeAnnotation)?;
  StarFunctionParameter     implements FunctionParameter = "*";

  @Override
  Arguments = "("
    (Argument || ",")*
     ","?
  ")";

  interface Argument;
  NormalArgument implements Argument = Expression;
  NamedArgument implements Argument = paramName:Name "=" Expression;

  // "@" assignment_expression NEWLINE
  //PyDecorator = "@" PyQualifiedName ("(" PyQualifiedName ")")? STATEMENT_END;
  PyDecorator = "@" Expression STATEMENT_END;

  ReturnStatement implements Statement = "return" (Expression || ",")* ","? STATEMENT_END;
  YieldStatement implements Statement = "yield" (Expression || ",")* ","? STATEMENT_END;
  RaiseStatement implements Statement = "raise" (Expression ("from" Name)?)? STATEMENT_END;

  ExpressionStatement implements Statement = Expression ("," Expression)* STATEMENT_END;

  EmptyStatement implements Statement, ClassStatement = STATEMENT_END;

  MatchStatement implements Statement = key("match") Expression ":" MatchBlock;

  scope MatchBlock = BLOCK_START CaseStatement* BLOCK_END;
  CaseStatement = key("case") (Expression || "|")+ ("if" condition:Expression)? ":" StatementBlock;

  ConditionalExecutionStatement implements Statement = "if" condition: Expression ":" Expression;

  DeleteStatement implements Statement = "del" (Expression || ",")+ ","? STATEMENT_END;

  /*===========================Literals======================================*/

   @Override
   token String = '"' (StringDQCharactersPython)? '"' : {setText(getText().substring(1, getText().length() - 1));};
  
  // string literals for python
   token StringPython
      = '\'' (StringSQCharactersPython)? '\''
      : {setText(getText().substring(1, getText().length() - 1));};

  fragment token StringSQCharactersPython
    = (StringSQCharacterPython)+;
  fragment token StringDQCharactersPython
    = (StringDQCharacterPython)+;

  fragment token StringSQCharacterPython
    = ~ ('\''| '\\' | '\n') | PythonEscapeSequence;
  fragment token StringDQCharacterPython
    = ~ ('"'| '\\' | '\n') | PythonEscapeSequence;

  fragment token PythonEscapeSequence
       = '\\' .;


   StringLiteralPython implements Literal, SignedLiteral =
        (
            StringModifier?
            (source:StringPython | source:String)
        );

   StringsLiteralPython implements Literal <200> = (StringLiteralPython | StringLiteral | MultiLineStringLiteral)+;

  // boolean literals for python
  BooleanLiteralPython implements Literal, SignedLiteral =
      source:["True" | "False"];

  // https://docs.python.org/dev/library/constants.html#Ellipsis
  EllipsisLiteral implements Literal = "...";
  splittoken "...";

  token FloatWithExponent = (DigitsPart | PyFloat) ('e'|'E') ('+' | '-')? DigitsPart;
  FloatWithExponentLiteral implements NumericLiteral <100> = FloatWithExponent;

  token PyFloat = DigitsPart? '.' DigitsPart | DigitsPart '.';
  PyFloatLiteral implements NumericLiteral <200> = PyFloat;

  // PEP 515
  token DigitsPart = Digit ('_'? Digit)*;


  /*======================Expressions===========================================*/

  SpreadListExpression implements Expression = "*" Expression;
  SpreadMappingExpression implements Expression = "**" Expression;
  splittoken "**";

  // ternary-operator expression
  TernaryOperatorExpression implements Expression <200> = thenExpression:Expression ( "if" condition:Expression
                                       "else" elseExpression:Expression )+ ;

  //mathematical expression
  IntegerDivisionExpression implements Expression <165>, InfixExpression = left:Expression  operator:"//" right:Expression ;
  IntegerPowExpression implements Expression <195>, InfixExpression = left:Expression operator:"**" right:Expression ;
  MatrixMultiplicationExpression implements Expression <200>, InfixExpression = left:Expression operator:"@" right:Expression;

  //logical expressions
  AndExpression implements Expression <120>, InfixExpression = left:Expression operator:"and" right:Expression ;
  OrExpression implements Expression <117>, InfixExpression = left:Expression operator:"or" right:Expression ;
  NotExpression implements Expression <10> = "not" Expression ;
  IsExpression implements Expression <130>, InfixExpression = left:Expression operator:"is" right:Expression ;
  InExpression implements Expression <195>, InfixExpression = left:Expression operator:"in" right:Expression ;
  NotInExpression implements Expression <195>, InfixExpression = left:Expression operator:"not" "in" right:Expression; // TODO: set operator to "not in" programmatically

  //Bitwise expressions
  BitwiseAndExpression implements Expression <120>, InfixExpression = left:Expression operator:"&" right:Expression;
  BitwiseOrExpression implements Expression <120>, InfixExpression = left:Expression operator:"|" right:Expression;
  BitwiseXOrExpression implements Expression <120>, InfixExpression = left:Expression operator:"^" right:Expression;
  BitwiseLeftShiftExpression implements Expression <120>, InfixExpression = left:Expression operator:"<<" right:Expression;
  BitwiseRightShiftExpression implements Expression <120>, InfixExpression = left:Expression operator:">>" right:Expression;

  BitwiseOnesComplimentExpression implements Expression <120> = "~" Expression;

  // lambda expression
  scope LambdaExpression implements Expression = "lambda" FunctionParameters ":" Expression ;
  AppliedLambdaExpression implements Expression = "(" LambdaExpression ")" "(" Expression ")" ;

  AwaitExpression implements Expression = "await" Expression;

  // TODO: Weird errors from antlr subsystem
  // IfExpression implements Expression = positive:Expression "if" condition:Expression "else" negative:Expression;

  /*===========================Classes======================================*/

  // class symbol
  interface scope symbol PythonClass = Name ;

  // class declaration statement
  ClassDeclaration implements PythonClass, Statement, ClassStatement = PyDecorator* "class" Name ( "(" ((superClasses:PyQualifiedName | arguments:NamedArgument) ","?)* ")" )? ":" ClassStatementBlock ;

  interface ClassStatement;

  ClassStatementBlock = BLOCK_START ClassStatementBlockBody BLOCK_END;
  ClassStatementBlockBody = ClassStatement+;

  // TODO: Why is there 2 function declarations?
  ClassFunctionDeclaration implements FunctionDeclaration, ClassStatement = PyDecorator* async:"async"? "def" Name "(" ClassFunctionParameters ")" ("->" returnType:TypeAnnotation)? ":" StatementBlock;

  ClassFunctionParameters = (FunctionParameter || ",")* ","?;

  ClassAttributes implements ClassStatement = VariableDeclaration STATEMENT_END;

  ClassCommentStatement implements ClassStatement = MultiLineStringLiteral STATEMENT_END;

// TODO: //= operator

  /*@Override
  AssignmentExpression implements Expression <60> = <rightassoc>
    left:Expression ("," left:Expression)* ","?
    operator: [ "=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|="
              | "^=" | ">>=" | ">>>=" | "<<=" | "%=" ]
    right:Expression ("," right:Expression)* ","?; */

  AnnotatedAssignmentExpression implements Expression <60> = <rightassoc>
      left:Expression
      ":" annotated: TypeAnnotation
      operator: [ "=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|="
                | "^=" | ">>=" | ">>>=" | "<<=" | "%=" ]
      right:Expression;

  UnpackingAssignmentExpression implements Expression <60> = <rightassoc>
    "(" left:Expression ("," left:Expression)* ","? ")" "="
    right: Expression;
}
