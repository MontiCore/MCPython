/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

grammar Python extends de.monticore.expressions.CommonExpressions,
                        de.monticore.expressions.AssignmentExpressions,
                        de.monticore.literals.MCCommonLiterals,
                        de.monticore.symbols.BasicSymbols {

  PythonScript = (Statement)*;

  token Indent = "    ";

  EOL = ("\n" | "\r" | "<EOF>")+ ;

  EmptyStatement implements Statement = EOL ;

  interface Statement ;

  StatementBlock = EOL? StatementBlockBody {decreaseIndent()}? EOL? ;
  StatementBlockBody = Indent {isIndentedCorrectly()}? Indent* Statement {increaseIndent()}? ({isIndentedCorrectly()}? Indent+ Statement)*;

  token SingleLineComment = "#" (~('\n' | '\r' ))*  : ->skip {storeComment();};

  // variable declaration
  LocalVariableDeclarationStatement implements Statement = VariableDeclaration EOL;

  VariableDeclaration = Declarator "=" VariableInit ;

  Declarator implements Variable = Name ;

  interface VariableInit ;

  SimpleInit implements VariableInit = Expression ;
  ArrayInit implements VariableInit = "[" (VariableInit || ",")* "]" ;

  // if-else
  IfStatement implements Statement = "if" condition:Expression ":" thenStatement:StatementBlock ("else" ":" elseStatement:StatementBlock)? ;

  // for-loop
  ForStatement implements Statement = "for" ForControl ":" StatementBlock ;

  interface ForControl ;

  CommonForControl implements ForControl = forVariable:Name "in" Expression ;
  ArrayForControl implements ForControl = forVariable:Name "in" ArrayInit ;


  // while-loop
  WhileStatement implements Statement = "while" condition:Expression ":" EOL? StatementBlock;


  // function declaration

  FunctionDeclaration implements Statement = "def" FunctionName "(" FunctionDeclarationArguments ")" ":" EOL
                                                        StatementBlock;
  FunctionName = Name ;

  interface FunctionDeclarationArguments ;

  SimpleFunctionDeclarationArguments implements FunctionDeclarationArguments = (Expression  || ",")*;

  ReturnStatement implements Statement = "return" Expression? EOL ;

  // function call
  FunctionCall implements Statement = Name@Function "(" FunctionArguments ")" EOL?;
  FunctionArguments = (Expression || ",")* ;


  ExpressionStatement implements Statement = Expression EOL;

  // TODO: statement at file end,

  concept antlr {
    parserjava {
      public int indentCounter = 0;

      public boolean isIndentedCorrectly() {
        if (indentCounter == 0) {
          if (!cmpTokenRegEx(1, "    |\t")) {
            return true;
          } else {
            return false;
          }
        }
        return cmpTokenRegEx(indentCounter, "    |\t") && !cmpTokenRegEx(indentCounter + 1, "    |\t");
      }


      public boolean decreaseIndent() {
        if (isIndentedCorrectly() || (cmpTokenRegEx(1, "\n|\r") && cmpTokenRegEx(indentCounter, "    |\t"))) {
          return false;
        }
        indentCounter--;
        return true;
      }

      public boolean increaseIndent() {
        indentCounter++;
        return true;
      }

    }
  }
}
