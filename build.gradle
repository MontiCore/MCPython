/* (c) https://github.com/MontiCore/monticore */
plugins {
    id "java"
    id "de.monticore.generator" version "$mc_version" // MontiCore Plugin
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id 'org.ec4j.editorconfig' version "0.0.3"
}

group = "de.monticore"
description = "SIPython"

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

subprojects {
    apply plugin: 'idea'
    idea {
        module {
            testSourceDirs += file("$projectDir/target/generated-test-sources/monticore/sourcecode")
        }
    }
}
buildDir = file("$projectDir/target")

dependencies {
    implementation "de.monticore:monticore-runtime:${project.properties['mc_version']}"
    implementation "org.jscience:jscience:$jscience_version"
    grammar "de.monticore:monticore-grammar:$mc_version"

    testImplementation ("de.monticore:monticore-grammar:${project.properties['mc_version']}") {capabilities {
        requireCapability("de.monticore:monticore-grammar-tests") }
    }
    testImplementation "org.junit.vintage:junit-vintage-engine:5.6.2"
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.github.javaparser:javaparser-symbol-solver-core:3.14.11"
}

repositories {
    if(("true").equals(getProperty('useLocalRepo'))){
        mavenLocal()
    }
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url repo
    }
}

test {
    useJUnit()
    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
        showStandardStreams = true
    }

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

sourcesJar.dependsOn(tasks.named("generateMCGrammars"))

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}

shadowJar { // all in one jar
    manifest {
        attributes "Main-Class": "de.monticore.umlcd4a.CD4ACLI"
    }
    archiveClassifier = "cli"
}

jar.dependsOn(shadowJar)

// generated java doc contains errors, disable for now
javadoc.failOnError(false)


task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn tasks.withType(Test)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            // artifact shadowJar
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}

task buildExecutable(type: Jar) {
    manifest {
        attributes 'Main-Class': 'de.monticore.sipython.Main'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    baseName = project.name
    classifier = "tool"
    version = "0.0.1-SNAPSHOT"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

buildExecutable.dependsOn(jar)
