/* (c) https://github.com/MontiCore/monticore */
plugins {
  id "java"
  id "de.monticore.generator" version "$mc_version"
  id "maven-publish"
  id "com.github.johnrengelman.shadow" version "6.0.0"
  id 'org.ec4j.editorconfig' version "0.0.3"
}

group = "de.monticore.lang"
description = "MCPython"

java {
  withSourcesJar()
  withJavadocJar()
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

dependencies {
  grammar "de.monticore:monticore-grammar:$mc_version"

  implementation "de.monticore:monticore-runtime:$mc_version"
  implementation "org.jscience:jscience:$jscience_version"


  testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
  testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.2"
  testImplementation "com.github.javaparser:javaparser-symbol-solver-core:3.14.11"
}

repositories {
  if (("true").equals(getProperty('useLocalRepo'))) {
    mavenLocal()
  }
  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url repo
  }
}

test {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
    showStackTraces = true
    showStandardStreams = true
  }

  onOutput { descriptor, event ->
    logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

shadowJar {
  manifest {
    attributes "Main-Class": "de.monticore.umlcd4a.CD4ACLI"
  }
  archiveClassifier = "cli"
}

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  reportOn tasks.withType(Test)
}

def testProjects = [
    "bletl"    : "https://github.com/JuBiotech/bletl.git",
    "calibr8"  : "https://github.com/sandialabs/calibr8.git",
    "murefi"   : "https://github.com/JuBiotech/murefi.git",
    "robotools": "https://github.com/JuBiotech/robotools.git"
]

testProjects.forEach { pn, pUrl ->
  def tn = "cloneExternalTestRepos_$pn"
  tasks.register(tn, Exec) {
    def cloneDir = "$buildDir/testRepos/$pn"
    commandLine "git", "clone", pUrl, cloneDir
    outputs.dir(cloneDir)
  }
  tasks.test.dependsOn(tasks.named(tn))
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
  repositories.maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
  }
}
